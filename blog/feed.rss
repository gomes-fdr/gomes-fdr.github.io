<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Web notes</title><link>https://gomes-fdr.github.io/blog/index.html</link>
<description>Alguns caracteres perdidos...</description><language>en</language>
<lastBuildDate>Sun, 10 May 2020 15:37:59 -0300</lastBuildDate>
<pubDate>Sun, 10 May 2020 15:37:59 -0300</pubDate>
<atom:link href="https://gomes-fdr.github.io/blog/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Dicas para uso do docker
</title><description><![CDATA[
Tags: wiki</p>

<p>Referencias utilizadas:
<a href="https://youtu.be/aHbE3pTyG-Q">link</a></p>

<p>Instalar um container - docker hub</p>

<pre><code>docker pull postgres:alpine
</code></pre>

<p>Listar containers instalados</p>

<pre><code>docker images -a
</code></pre>

<p>Remover um container</p>

<pre><code>docker rmi &lt;nome-do-container&gt;
</code></pre>

<p>Iniciar um container</p>

<pre><code>docker run --name postgres-0 -e POSTGRES_PASSWORD=1234 -d -p 5432:5432 postgres:alpine
</code></pre>

<p>Processo docker rodando</p>

<pre><code>docker ps
</code></pre>

<p>Para subir uma imagem existente</p>

<pre><code>docker start postgres-0 # &lt;container-name&gt;
</code></pre>

<p>Parar o container</p>

<pre><code> docker stop postgres-0 # &lt;container-name&gt;
</code></pre>

<p>Para entrar no container</p>

<pre><code>docker exec -it postgres-0 bash
</code></pre>

<p>Para acessar o banco de dados postgre dentro do container(console postgres)</p>

<pre><code>psql -U postgres
</code></pre>

<p>Para fazer o dump do banco do container</p>

<pre><code>docker exec -t postgres-0 pg_dumpall -a &gt; dump_`date +%d-%m-%Y"_"%H_%M_%S`.sql
docker exec -t postgres-0 pg_dump -a &gt; dump_`date +%d-%m-%Y"_"%H_%M_%S`.sql
</code></pre>

<p>Para restaurar o banco apartir de um dump file</p>

<pre><code>cat your_dump.sql | docker exec -i your-db-container psql -U postgres
</code></pre>

<p>VERIFICA SE A PORTA ESTÁ EM USO</p>

<pre><code>netstat -an | grep 5432
</code></pre>

<p>STOP POSTGRE SERVICE</p>

<pre><code>sudo service postgresql stop
</code></pre>

<p>Copiar arquivo para container:</p>

<pre><code>docker cp &lt;arquivo&gt; &lt;container_id&gt;:/
</code></pre>

<p>Acessar o postgres do container:</p>

<pre><code>psql -h localhost -p 5432 -U postgres
</code></pre>

<p>Para criar um novo banco no postgre via CL:</p>

<pre><code>createdb -U &lt;role&gt; &lt;nome-banco&gt;
</code></pre>

<h2>Outra maneira de fazer o backup</h2>

<pre><code>docker exec -u &lt;your_postgres_user&gt; &lt;postgres_container_name&gt; pg_dump -Fc &lt;database_name_here&gt; &gt; db.dump
</code></pre>

<h2>Cuidado</h2>

<pre><code>docker exec -u &lt;your_postgres_user&gt; &lt;postgres_container_name&gt; psql -c 'DROP DATABASE &lt;your_db_name&gt;'

docker exec -i -u &lt;your_postgres_user&gt; &lt;postgres_container_name&gt; pg_restore -C -d postgres &lt; db.dump
</code></pre>

<p>Exemplo:</p>

<p>Custom format (c)</p>

<pre><code>docker exec -u labwide postgres-0 pg_dump -Fc gestam-dados &gt; gestam-dados.dump
</code></pre>

<p>SQL format(p)</p>

<pre><code>docker exec -u postgres postgres-0 pg_dump -Fp gestam-dados &gt; gestam-dados.dump
</code></pre>

<h2>Backup acessando o container</h2>

<h3>copy dump into container</h3>

<pre><code>docker cp local/path/to/db.dump CONTAINER_ID:/db.dump
</code></pre>

<h3>shell into container</h3>

<pre><code>docker exec -it CONTAINER_ID bash
</code></pre>

<h3>restore it from within</h3>

<pre><code>pg_restore -U postgres -d DB_NAME --no-owner -1 /db.dump
</code></pre>

<!-- text end -->
]]></description><link>https://gomes-fdr.github.io/blog/dicas-para-uso-do-docker.html</link>
<guid>https://gomes-fdr.github.io/blog/./dicas-para-uso-do-docker.html</guid>
<dc:creator>Fabiano Gomes</dc:creator>
<pubDate>Sun, 10 May 2020 15:27:13 -0300</pubDate></item>
<item><title>
Ferramentas Para Dev, ASDF
</title><description><![CDATA[
Tags: dev-tools</p>

<p>Quando começamos a desenvolver software, precisamos montar nossa "caixa de ferramentas" - uma coleção de programas que nos ajudam a ser mais produtivo na criação de software. Se trabalhamos com linguagens interpretadas como javascript, python ou lua - para citar algumas com as quais eu trabalho, é muito comum precisarmos utilizar diferentes versões de interpretadores. É muito complicado e chato fazer isso manualmente, existem diversas ferramentas que resolvem esse tipo de problema dentro do seu escopo, ruby tem o seu gerenciador de ambientes virtuais, python também e por ai vai.
Felizmente alguém pensou em fazer um gerenciador "genérico" para ajudar um grande número de desenvolvedores das mais diversas linguagens, esse projeto chama-se <a href="https://asdf-vm.com">ASDF</a> e resolve de uma forma muito elegante o problema de convivência de diferentes interpretadores num mesmo computador, vamos ver como fazer a instalação e configuração dele para alguns interpretadores.</p>

<h2>Instalação</h2>

<p>Tudo que estou postando aqui foi retirado do site oficial do <a href="https://asdf-vm.com">ASDF</a> sem dúvida a melhor fonte para funcionalidades mais específicas.</p>

<pre><code>git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.3
</code></pre>

<h2>Tonar visível para o seu shell</h2>

<pre><code>echo -e '\n. $HOME/.asdf/asdf.sh' &gt;&gt; ~/.bashrc
echo -e '\n. $HOME/.asdf/completions/asdf.bash' &gt;&gt; ~/.bashrc
</code></pre>

<h2>Como o ASDF funciona?</h2>

<p>Ele não armazena cada versão de interpretador no site do projeto, ao invés disso através de receitas é feita a instalação das diferentes versões dos interpretadores que você precisa - na linguagem do ASDF, estas receitas são chamadas de plugins. Então a primeira coisa a ser feita após a instalação do ASDF é a escolha de quais linguagens vamos trabalhar, neste exemplo vou mostrar como fazer a instalação de diferntes versões de Lua.</p>

<h2>Listando os plugins disponíveis</h2>

<p>Para saber quais as versões são possíveis de instalar, basta:</p>

<pre><code>asdf list-all lua
</code></pre>

<p>Uma saída semelhante a essa será exibida:</p>

<pre><code>asdf list-all lua
5.1
5.2.0
5.2.1
5.2.2
5.2.3
5.2.4
5.3.0
5.3.1
5.3.2
5.3.3
5.3.4
5.3.5
</code></pre>

<h2>Instalando o plugin</h2>

<pre><code>asdf plugin-add lua
</code></pre>

<h2>Instalando uma versão</h2>

<pre><code>asdf install lua 5.2.4
</code></pre>

<h2>Tornando a versão instalada ativa</h2>

<pre><code>asdf global lua 5.2.4
</code></pre>

<p>Aqui cabe um observação importante, como foi dito anteriormente o ASDF não mantém uma cópia dos interpretadores compilados em seu site, ele é apenas um repositório de receitas. Logo essa receita vai baixar os fontes dos respectivos projetos e compila-los - para isso é importante que as dependências necessárias para compilar cada interpretador estejam presentes no seu computador. Em cada repositório de plugin temos uma lista do que é necessário e de como fazer a instalação destas dependências.</p>

<h2>Um exemplo de instalações</h2>

<pre><code>asdf list
lua
  5.2.4
  5.3.5
python
  3.7.4
asdf current
   lua            5.3.5    (set by /home/fabiano/.tool-versions)
   python         3.7.4    (set by /home/fabiano/.tool-versions)
</code></pre>

<p>Para outros interpretadores basta repetir o processo, facinho.
Finalizamos por aqui esse tutorial, em caso de dúvidas, deixe seu comentário.</p>

<!-- text end -->
]]></description><link>https://gomes-fdr.github.io/blog/ferramentas-para-dev-asdf11978.html</link>
<guid>https://gomes-fdr.github.io/blog/./ferramentas-para-dev-asdf11978.html</guid>
<dc:creator>Fabiano Gomes</dc:creator>
<pubDate>Sun, 10 May 2020 15:25:41 -0300</pubDate></item>
</channel></rss>
